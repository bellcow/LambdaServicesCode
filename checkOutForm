const AWS = require('aws-sdk');
const DynamoDB = new AWS.DynamoDB.DocumentClient({region: 'us-east-1', apiVersion: '2012-08-10'});
var SquareConnect = require('square-connect');
var uuid = require('uuid');
var defaultClient = SquareConnect.ApiClient.instance;
var oauth2 = defaultClient.authentications['oauth2'];
oauth2.accessToken = "EAAAENT3rhcU0U3LbKeC5-KCdam3nn8hS70G5_UU4C9PgI5Ap4yCvEtxXCMheSAP";
var checkoutApiInstance = new SquareConnect.CheckoutApi();
//var locationApiInstance = new SquareConnect.LocationsApi();
var locationKey = "CBASEABfsrGxoGCjOYsah4779D8gAQ";

exports.handler = async (data, context, callback) => {
    console.log('----data---',data);
    if(!data) {
        context.done(null, {"success":false, "message":"Invalid parameters"});
    }
    
    let orderData = data.orderInfo;
    let referenceId = 'order_'+Date.now().toString();
    
    //return getLocation();
    orderData.idempotency_key = uuid.v1();
    orderData.order.reference_id = referenceId;
    
    /*function getLocation() {
        return locationApiInstance.listLocations().then(function(data) {
            console.log(data.locations);
            if("locations" in data) {
                return initiateCheckoutProcess(data.locations[0]['id'], body);
            } else {
                return {"success":false, "message":"No locations found to fulfill this order."};
            }
        }, function(error) {
            console.error(error);
            return {"success":false, "message":"Something went wrong"};
        });
    }*/
    
    
    //var body = new SquareConnect.CreateCheckoutRequest();
    return checkoutApiInstance.createCheckout(locationKey, orderData).then(async function(checkoutRes) {
        console.log('----success------', checkoutRes);
        let dbObj = {};
        dbObj["orderId"] = referenceId;
        dbObj["transactionId"] = referenceId;
        dbObj['line_items'] = orderData.order.line_items;
        dbObj['discounts'] = orderData.order.discounts ;
        dbObj['taxes'] = orderData.order.taxes;
        dbObj['paymentStatus'] = 'Pending';
        dbObj['name'] = data.name;
        dbObj['email'] = data.email;
        dbObj['phone'] = data.phone;
        dbObj["dateAdded"] = (new Date().getMonth()+1).toString()+'-'+(new Date().getDate()-1).toString()+'-'+ new Date().getFullYear().toString();
        const params = {
          Item : dbObj,
          TableName : "squareup_orders"
        };
        
        let putItem = new Promise((res, rej) => {
            console.log('params', params);
            DynamoDB.put(params, async (err, data) => {
               if(err) {
                  console.log("Error in storing data :: " + err);
                  rej({"success":false,"message":"Failed to store order info"});
               } else{
                  console.log("successfully added to database about "+ data);
                  let emailRes = await sendEmailNotification();
                  res(checkoutRes);
               }
            });
        });
        
        const result = await putItem;
        return result
        
        async function sendEmailNotification() {
            return new Promise(async function(resolve,reject) {
                try {
                    console.log('came to mail');
                    const danceHtmlBody = `
                        <!DOCTYPE html>
                        <html>
                          <head>
                          </head>
                          <body>
                            <p> Hey Guys, Here is another partner is trying to register for classes. Payment not yet completed.</p>
                            <p> Order Reference : ${referenceId} </p>
                            <p> Name : ${data.name} </p>
                            <p> Email : ${data.email} </p>
                            <p> Phone : ${data.phone} </p>
                          </body>
                        </html>
                    `;
                    const danceTextBody = ` Hi Guys,...`;
                    const danceEmailParams = {
                        Destination: {
                          ToAddresses: ['lakshman.chanapathi@gmail.com']    // 'dance@artismotion.org'
                        },
                        Message: {
                          Body: {
                            Html: {
                              Charset: "UTF-8",
                              Data: danceHtmlBody
                            },
                            Text: {
                              Charset: "UTF-8",
                              Data: danceTextBody
                            }
                          },
                          Subject: {
                            Charset: "UTF-8",
                            Data: "Another partner is trying to register for classes"
                          }
                        },
                        Source: "New partner is trying to register for classes <dlamb@bellcowpartners.com>"
                    };
                    const danceSendPromise = new AWS.SES({ apiVersion: "2010-12-01" }).sendEmail(danceEmailParams).promise();
                    danceSendPromise.then(data => {
                      console.log('dance email response', data);
                      return resolve({"success":true,"message":"Thanks for Contacting Artismotion! We will reach you soon.."});
                    }).catch(err => {
                      console.error(err, err.stack);
                      return resolve({"success":false,"message":"Failed to send email notification"});
                    });
                } catch(err) {
                    console.log(err);
                    return resolve({"success":false,"message":"Failed to send email notification"});
                }
            });
        }
        
    }, function(error) {
        console.error('----error------',error);
        callback(error,null);
    });
};
