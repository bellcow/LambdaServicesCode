const AWS = require('aws-sdk');
const https = require('https');
const dynamodb = new AWS.DynamoDB({
    region: 'us-east-1',
    apiVersion: '2012-08-10'
});
var docClient = new AWS.DynamoDB.DocumentClient();

function recaptchaVerification(recaptcha, recaptchaSecretValue) {

    return new Promise((resolve, reject) => {

        console.log('Message : recaptcha value is ', recaptcha);
        console.log('Message : recaptchaSecret value is ', recaptchaSecretValue);
        const querystring = require('querystring');
        const postData = querystring.stringify({
            secret: recaptchaSecretValue,
            response: recaptcha
        });
        console.log('Message : postdata for recaptcha : ', postData);
        var options = {
            hostname: 'www.google.com',
            path: '/recaptcha/api/siteverify',
            method: 'POST',
            port: 443,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'Content-Length': Buffer.byteLength(postData)
            }

        };

        var req = https.request(options, (res) => {

            res.on('data', (d) => {
                if (d === undefined) {
                    console.log('Message : Error is ', d);
                    reject(false);
                }

                const response = JSON.parse(d);
                console.log('Message : response from recaptcha ', response);
                if (response.success === true) {
                    console.log('Message : recaptcha response is success');
                    resolve(true);
                } else {
                    console.log('Message : recaptcha response is failed');
                    reject(false);

                }
            })
        });
        req.write(postData);
        req.end();

    })


}

exports.handler = async (event, context, callback) => {

    console.log("Message : Here is the requst body :  ", event);

    if (event.appname != null || event.recaptcha != null) {
        console.log('Message : appname is ', event.appname);

        const recaptchaSecretValue = await loadRecaptchaSecret(event.appname);
        console.log("Message : recaptcha secret is ", recaptchaSecretValue);
        let recaptchaSuccess = await recaptchaVerification(event.recaptcha, recaptchaSecretValue);
        console.log("Message : recaptcha response is ", recaptchaSuccess);

        if (event.recaptcha && recaptchaSuccess) {
            console.log("Message : Action of the event is : ", event.action);
            console.log("Message : Headers in the request", event.headers);

            let action = event.action;
            if (action == null) {
                action = event.headers.apiname;
            }
            console.log("Message : action is ", action);
            if (action !== 'input.contactUs' && action !== 'contactus') {
                console.log("ErrorMessage : Action of the event is not contact us, Sending bad response");
                callback(null, buildChatResponse("Sorry I dont know what is this", 'failed'));
                return;

            }

            if (!event.emailId.match(/^[^@]+@[^@]+$/)) {
                console.log("ErrorMessage : invalid email address", event);
                context.done(null, buildChatResponse("Invalid email id ", 'failed'));
                return;
            }


            let fields = ["name", "emailId", "phoneNumber", "message"];
            let dbObj = {};

            dbObj["contactId"] = {
                S: "contact_" + Date.now().toString()
            };

            console.log("Message : contact id is ", dbObj["contactId"]);
            console.log("Message : parameters from event", event);

            for (let i = 0; i < fields.length; i++) {
                if ((fields[i] in event && event[fields[i]]))
                    console.log("Message : adding : " + fields[i]);
                dbObj[fields[i]] = {
                    S: event[fields[i]]
                }
            }
            dbObj["dateAdded"] = {
                S: (new Date().getMonth() + 1).toString() + '-' + (new Date().getDate() - 1).toString() + '-' + new Date().getFullYear().toString()
            };

            const params = {
                Item: dbObj,
                TableName: "artismotion_contactus"
            };
            console.log("Message : adding data to table ", params);
            const parameters = event;
            console.log("Message : parameters are ", parameters);


            var name = parameters['name'];
            var emailId = parameters['emailId'];
            var phoneNumber = parameters['phoneNumber'];
            var message = parameters['message'];

            //This method is for writing into database
            dynamodb.putItem(params, function (err, data) {
                console.log("Message : inside putItem method");
                if (err) {
                    console.log("Error in storing data :: " + err);
                    callback(err)
                } else {
                    console.log("successfully added to database about " + data);
                    sendEmailNotification(name, emailId, phoneNumber, message);
                }
            });

            console.log("Message : After put method");
            callback(null, buildChatResponse("Hey, One of our agent wil soon contact you.", 'success'));

        } else {
            callback(null, buildChatResponse("recaptcha failed", 'failed'))
        }


    } else {
        console.log('recaptcha is empty');
        callback(null, buildChatResponse("recaptcha and appname is empty", 'failed'))
    }


};

function loadRecaptchaSecret(appname) {

    return new Promise(function(resolve, reject){

        const params = {
            TableName: 'sqaure_apps',
            KeyConditionExpression: "#ap = :appname",
            ExpressionAttributeNames: {
                "#ap": "appname"
            },
            ExpressionAttributeValues: {
                ":appname": appname
            }
        };

        console.log('Message : params', params);

        docClient.query(params, function (err, data) {
            if (err) {
                console.error("ErrorMessage : Unable to query. Error:", JSON.stringify(err, null, 2));
            } else {
                console.log("Message : loaded recaptcha secret is ", data.Items[0].recaptchaSecret)
                resolve(data.Items[0].recaptchaSecret);
            }

        });
    });
}


//sending response
function buildChatResponse(chat, message) {
    return {
        "speech": chat,
        "displayText": chat,
        "message": message
    };

}

//this method is for email sending
function sendEmailNotification(name, emailId, phoneNumber, message) {
    name = name.substr(0, 40).replace(/[^\w\s]/g, '');

    const userHtmlBody = `
        <!DOCTYPE html>
        <html>
          <head>
          </head>
          <body>
            <p>Hi ${name},</p>
            <p> Thanks for contacting Art is motion, one of the resources will contact you soon.</p>
            <p>
            Thanks, <br>
            <b>Art Is Motion </b><br>
            Dance - Yoga - Fitness Studio <br>
            (678) 577-2823 <br>
            Duluth and Buford.
          </body>
        </html>
    `;
    const clientHtmlBody = `
        <!DOCTYPE html>
        <html>
          <head>
          </head>
          <body>
            <p> Hey Art Is Motion, One of the future customer needs some help, Please contact him back. </p>
            <p> Name : ${name} </p>
            <p> Email : ${emailId} </p>
            <p> Phone : ${phoneNumber} </p>
            <p> Message : ${message ? message : ''} </p>
          </body>
        </html>
    `;

    const clientTextBody = ` Hi Guys,...`;
    const userTextBody = ` Hi ${name},...`;


    const userEmailParams = {
        Destination: {
            ToAddresses: [emailId]
        },
        Message: {
            Body: {
                Html: {
                    Charset: "UTF-8",
                    Data: userHtmlBody
                },
                Text: {
                    Charset: "UTF-8",
                    Data: userTextBody
                }
            },
            Subject: {
                Charset: "UTF-8",
                Data: "Thanks for Contacting Art is Motion!"
            }
        },
        Source: "Info from Art is motion <info@artismotion.org>"
    };

    const clientEmailParams = {
        Destination: {
            ToAddresses: ['dlamb@bellcoww.com'] // 'info@artismotion.org'
        },
        Message: {
            Body: {
                Html: {
                    Charset: "UTF-8",
                    Data: clientHtmlBody
                },
                Text: {
                    Charset: "UTF-8",
                    Data: clientTextBody
                }
            },
            Subject: {
                Charset: "UTF-8",
                Data: "Future Customer seeking our help!"
            }
        },
        Source: "New contact from Art is motion <info@artismotion.org>"
    };

    //Create the promise and SES service object
    console.log("Message : Sending email", userEmailParams);
    const userSendPromise = new AWS.SES({
        apiVersion: "2010-12-01"
    }).sendEmail(userEmailParams).promise();
    console.log("Message : sending email", clientEmailParams);
    const clientSendPromise = new AWS.SES({
        apiVersion: "2010-12-01"
    }).sendEmail(clientEmailParams).promise();

    // Handle promise's fulfilled/rejected states

    clientSendPromise.then(data => {
        console.log(data.MessageId);

    }).catch(err => {
        console.error(err, err.stack);

    });
    userSendPromise.then(data => {
        console.log(data.MessageId);
        context.done(null, {
            "success": true,
            "message": "Thanks for Contacting Art is Motion! We will reach you soon.."
        });
    }).catch(err => {
        console.error(err, err.stack);
        context.done(null, {
            "success": false,
            "message": "Failed to send email notification"
        });
    })

}
